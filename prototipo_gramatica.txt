INICIO	->	CUERPO_GLOBAL

CUERPO_GLOBAL 	->	LISTA_GLOBAL
		|

LISTA_GLOBAL	-> 	LISTA_GLOBAL INSTRUCCION_GLOBAL
		|	INSTRUCCION_GLOBAL

INSTRUCCION_GLOBAL	->	DECLARACION;
			|	ESTRUCTURA;
			|	FUNCION

ESTRUCTURA	->	_struct identificador{CARACTERISTICAS};

CARACTERISTICAS	->	LISTA_CARACTERISTICAS;
		|

LISTA_CARACTERISTICAS	->	LISTA_CARACTERISTICAS ; CARACTERISTICA
			|	CARACTERISTICA

FUNCION		->	TIPO identificador(PARAMETROS){CUERPO_LOCAL}

PARAMETROS	->	LISTA_PARAMETROS
		|

LISTA_PARAMETROS	->	LISTA_PARAMETROS , CARACTERISTICA
			|	CARACTERISTICA

CARACTERISTICA	-> 	TIPO IDENTIFICADORES

IDENTIFICADORES	->	**identificador
		|	*identificador
		|	identificador
		|	(IDENTIFICADORES)

CUERPO_LOCAL	->	LISTA_LOCAL
		|

LISTA_LOCAL	->	LISTA_LOCAL INSTRUCCION_LOCAL
		|	INSTRUCCION_LOCAL

INSTRUCCION_LOCAL	->	ETIQUETA
			|	SALTO
			|	DECLARACION;
			|	ASIGNACION;
			|	IF
			|	SWITCH
			|	WHILE
			|	DO
			|	FOR
			|	continue;
			|	break;
			|	return EXPRESION;

ETIQUETA	->	identificador:

SALTO		->	_goto identificador;

DECLARACION	->	TIPO LISTA_DECLARACION

LISTA_DECLARACION	->	LISTA_DECLARACION , DECLARACION_FINAL
			|	DECLARACION_FINAL

DECLARACION_FINAL	->	IDENTIFICADORES INDICES = EXPRESION
			|	IDENTIFICADORES INDICES

INDICES	->	ACCESOS
	|

ACCESOS	->	ACCESOS ACCESO
	|	ACCESO

ACCESO 	->	[EXPRESION]
	|	[]

ASIGNACION	->	IDENTIFICADORES INDICES COMPUESTO EXPRESION
		|	IDENTIFICADORES INDICES . identificador COMPUESTO EXPRESION
		|	IDENTIFICADORES INDICES -> identificador COMPUESTO EXPRESION
		|	IDENTIFICADORES ++
		|	IDENTIFICADORES --

COMPUESTO	->	=
		|	+=
		|	*=
		|	/=
		|	%=
		|	<<=
		|	>>=
		|	&=
		|	^=
		|	|=

IF	-> 	_if(EXPRESION){CUERPO_LOCAL} ELSEIFS ELSE

ELSEIFS	->	LISTA_ELSEIF
	|

LISTA_ELSEIF	->	LISTA_ELSEIF ELSEIF
		|	ELSEIF

ELSEIF	->	_elseif(EXPRESION){CUERPO_LOCAL}

ELSE 	->	_else{CUERPO_LOCAL}

SWITCH	->	_switch(EXPRESION){CASES DEFAULT_CASE}

CASES	->	LISTA_CASE
	|

LISTA_CASE	->	LISTA_CASE CASE
		|	CASE

CASE		->	_case EXPRESION: CUERPO_LOCAL

DEFAULT_CASE	->	_default: CUERPO_LOCAL

WHILE	->	_while(EXPRESION){CUERPO_LOCAL}

DO	->	_do{CUERPO_LOCAL}_while(EXPRESION);

FOR	->	_for(DECLARACION;EXPRESION;ASIGNACION){CUERPO_LOCAL}

EXPRESION	->	EXPRESION + EXPRESION
		|	EXPRESION - EXPRESION
		|	EXPRESION * EXPRESION
		|	EXPRESION / EXPRESION
		|	EXPRESION % EXPRESION
		|	EXPRESION == EXPRESION
		|	EXPRESION != EXPRESION
		|	EXPRESION > EXPRESION
		|	EXPRESION < EXPRESION
		|	EXPRESION >= EXPRESION
		|	EXPRESION <= EXPRESION
		|	EXPRESION && EXPRESION
		|	EXPRESION || EXPRESION
		|	EXPRESION << EXPRESION
		|	EXPRESION >> EXPRESION
		|	EXPRESION & EXPRESION
		|	EXPRESION | EXPRESION
		|	EXPRESION ^ EXPRESION
		|	EXPRESION ? EXPRESION : EXPRESION
		|	-EXPRESION
		|	!EXPRESION
		|	~EXPRESION
		|	(TIPO *)_malloc(_sizeof(TIPO))
		|	identificador
		|	identificador(EXPRESIONES)
		|	identificador.identificador
		|	identificador ACCESOS
		|	identificador->identificador
		|	&identificador
		|	{EXPRESIONES}
		|	(EXPRESION)
		|	caracter
		|	cadena
		|	entero
		|	decimal

EXPRESIONES	->	LISTA_EXPRESIONES
		|

LISTA_EXPRESIONES	->	LISTA_EXPRESIONES , EXPRESION
			|	EXPRESION

TIPO	->	_int
	|	_char
	|	_double
	|	_float
	|	_char
	|	_struct identificador
	|	_void

# TOKENS
{
}
;
(
)
,
*
:
[
]
.
+
-
=
/
%
<
>
&
^
|
?
!
~

# PALABRAS RESERVADAS
_struct
_continue
_break
_return
_goto
_if
_elseif
_else
_switch
_case
_default
_while
_do
_for
_malloc
_sizeof
_int
_char
_double
_float
_void

# EXPRESIONES REGULARES
identificador
caracter
cadena
entero
decimal